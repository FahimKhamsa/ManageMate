generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  passwordHash String
  role         Role        @default(attendee)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  events       Event[]     @relation("OrganizerEvents")
  feedbacks    Feedback[]
  attendees    Attendee[]
  tickets      Ticket[]
  analytics    Analytics[]
}

enum EventStatus {
  pending
  approved
}

model Event {
  id           Int         @id @default(autoincrement())
  title        String
  description  String
  date         DateTime
  location     String
  imageUrl     String?
  organizerId  Int
  status       EventStatus @default(pending)
  organizer    User        @relation("OrganizerEvents", fields: [organizerId], references: [id])
  attendees    Attendee[]
  feedbacks    Feedback[]
  tickets      Ticket[]
  analytics    Analytics[]
  ticketPrices Json
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Attendee {
  id           Int            @id @default(autoincrement())
  userId       Int
  eventId      Int
  count        Int
  status       AttendeeStatus @default(registered)
  registeredAt DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id])
  event        Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  rating    Int      @default(1)
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Ticket {
  id           String       @id @default(uuid())
  eventId      Int
  event        Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId       Int
  user         User         @relation(fields: [userId], references: [id])
  type         TicketType
  price        Decimal
  purchaseDate DateTime     @default(now())
  status       TicketStatus @default(PAID)

  @@index([eventId])
  @@index([userId])
}

model Analytics {
  id           Int     @id @default(autoincrement())
  userId       Int
  eventId      Int
  totalTickets Int     @default(0)
  totalSales   Decimal @default(0.0)

  earlyBirdSales Int @default(0)
  regularSales   Int @default(0)
  vipSales       Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

enum TicketType {
  EARLY_BIRD
  REGULAR
  VIP
}

enum TicketStatus {
  PAID
  REFUNDED
}

enum Role {
  admin
  organizer
  attendee
}

enum AttendeeStatus {
  registered
  checked_in
}
